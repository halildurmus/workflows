name: Flutter Package Workflow

on:
  workflow_call:
    inputs:
      analyze_directories:
        required: false
        type: string
        default: ''
      codecov_flags:
        required: false
        type: string
        default: ''
      flutter_sdk:
        required: false
        type: string
        default: 'stable'
      format_directories:
        required: false
        type: string
        default: '.'
      min_pana_score:
        required: false
        type: number
        default: 160
      run_tests:
        required: false
        type: boolean
        default: true
      runs_on:
        required: false
        type: string
        default: 'ubuntu-latest'
      setup:
        required: false
        type: string
        default: ''
      upload_coverage:
        required: false
        type: boolean
        default: false
      validate_dartdoc_links:
        required: false
        type: boolean
        default: false
      verify_pana_score:
        required: false
        type: boolean
        default: false
      working_directory:
        required: false
        type: string
        default: '.'
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  build:
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}

    runs-on: ${{inputs.runs_on}}

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{inputs.flutter_sdk}}
          cache: true
          cache-key: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}

      - name: 📝 Print Flutter SDK version
        run: flutter --version

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: ⚙️ Run Setup
        if: "${{inputs.setup != ''}}"
        run: ${{inputs.setup}}

      - name: ✨ Check Formatting
        run: dart format --set-exit-if-changed ${{inputs.format_directories}}

      - name: 🕵️ Analyze
        run: flutter analyze --fatal-infos --fatal-warnings ${{inputs.analyze_directories}}

      - name: 🧪 Run Tests
        if: ${{ inputs.run_tests }}
        run: flutter test

      - name: 📦 Install coverage
        if: ${{ inputs.upload_coverage }}
        run: flutter pub global activate coverage

      - name: 📊 Generate Code Coverage
        if: ${{ inputs.upload_coverage }}
        run: flutter pub global run coverage:test_with_coverage

      - name: 📡 Upload Code Coverage Reports to Codecov
        if: ${{ inputs.upload_coverage }}
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          files: coverage/lcov.info
          flags: ${{ inputs.codecov_flags }}
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 📒 Check API Reference Documentation
        if: ${{ inputs.validate_dartdoc_links }}
        run: dart doc --validate-links
        
      - name: 📦 Install Pana
        if: ${{ inputs.verify_pana_score }}
        run: flutter pub global activate pana

      - name: 📦 Install webp
        if: ${{ inputs.verify_pana_score && inputs.runs_on == 'ubuntu-latest' }}
        run: |
          sudo apt-get -y install webp

      - name: 📊 Verify Pana Score
        if: ${{ inputs.verify_pana_score }}
        run: |
          pana --no-warning --exit-code-threshold=0 --json |
            --flutter-sdk $(flutter --no-version-check --version --machine | jq -r '.flutterRoot')

